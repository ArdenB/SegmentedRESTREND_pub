install.packages("bfast")
install.packages("RNetCDF")
install.packages("udunits2")
install.packages("udunits2")
install.packages("udunits2")
install.packages("RNetCDF")
install.packages("utScan")
install.packages("RNetCDF")
install.packages("ncdf")
install.packages("RNetCDF")
install.packages("udunits2")
install.packages("udunits2")
install.packages("udunits2", configure.args='--with-udunits2=/home/arden/miniconda/lib/ --with-udunits2-include=/home/arden/miniconda/include/')
install.packages("udunits2", configure.args='--with-udunits2=/home/arden/miniconda/lib/ --with-udunits2-include=/home/arden/miniconda/include/')
install.packages("udunits2", configure.args='--with-udunits2=/home/arden/miniconda/lib')
install.packages("RNetCDF", configure.args='--with-udunits2=/home/arden/miniconda/lib --with-udunits2-include=/home/arden/miniconda/include')
install.packages("udunits2", configure.args='--with-udunits2=/home/arden/miniconda/lib')
install.packages("RNetCDF", configure.args='--with-udunits2=/home/arden/miniconda/lib --with-udunits2-include=/home/arden/miniconda/include')
install.packages("udunits2", configure.args='--with-udunits2=/home/arden/miniconda/lib --with-udunits2-include=/home/arden/miniconda/include')
install.packages("udunits2", configure.args='--with-udunits2=/home/arden/miniconda/pkgs/udunits-2.2.17-4/ --with-udunits2-include=/home/arden/miniconda/include')
install.packages("udunits2", configure.args='--with-udunits2=/home/arden/miniconda/pkgs/udunits-2.2.17-4/lib --with-udunits2-include=/home/arden/miniconda/pkgs/udunits-2.2.17-4/include/')
UDUNITS2_INCLUDE
environment variables
install.packages("udunits2", configure.args='--with-udunits2=/home/arden/miniconda/pkgs/udunits-2.2.17-4/lib --with-udunits2-include=/home/arden/miniconda/pkgs/udunits-2.2.17-4/include')
install.packages("udunits2", configure.args='--with-udunits2=/home/arden/miniconda/pkgs/udunits-2.2.17-4/lib --with-udunits2-include=/home/arden/miniconda/pkgs/udunits-2.2.17-4/include')
install.packages("udunits2", --configure.args='--with-udunits2=/home/arden/miniconda/pkgs/udunits-2.2.17-4/lib --with-udunits2-include=/home/arden/miniconda/pkgs/udunits-2.2.17-4/include')
install.packages("udunits2", -configure.args='--with-udunits2=/home/arden/miniconda/pkgs/udunits-2.2.17-4/lib --with-udunits2-include=/home/arden/miniconda/pkgs/udunits-2.2.17-4/include')
install.packages("udunits2" -configure.args='--with-udunits2=/home/arden/miniconda/pkgs/udunits-2.2.17-4/lib --with-udunits2-include=/home/arden/miniconda/pkgs/udunits-2.2.17-4/include')
install.packages("udunits2" --configure.args='--with-udunits2=/home/arden/miniconda/pkgs/udunits-2.2.17-4/lib --with-udunits2-include=/home/arden/miniconda/pkgs/udunits-2.2.17-4/include')
install.packages("udunits2" -configure.args='--with-udunits2=/home/arden/miniconda/pkgs/udunits-2.2.17-4/lib
install.packages("udunits2" -configure.args='--with-udunits2=/home/arden/miniconda/pkgs/udunits-2.2.17-4/lib')
install.packages("udunits2", -configure.args='--with-udunits2=/home/arden/miniconda/pkgs/udunits-2.2.17-4/lib')
install.packages("udunits2", configure.args='--with-udunits2=/home/arden/miniconda/pkgs/udunits-2.2.17-4/lib')
install.packages("udunits2", configure.args='with-udunits2=/home/arden/miniconda/pkgs/udunits-2.2.17-4/lib')
install.packages("udunits2", configure.args='--with-udunits2-lib=/home/arden/miniconda/pkgs/udunits-2.2.17-4/lib')
install.packages("udunits2" --configure.args='--with-udunits2-lib=/home/arden/miniconda/pkgs/udunits-2.2.17-4/lib --with-udunits2-include=/home/arden/miniconda/pkgs/udunits-2.2.17-4/include')
install.packages("udunits2", configure.args='--with-udunits2-lib=/home/arden/miniconda/pkgs/udunits-2.2.17-4/lib --with-udunits2-include=/home/arden/miniconda/pkgs/udunits-2.2.17-4/include')
install.packages("udunits2", configure.args='--with-udunits2-lib=/home/arden/miniconda/lib --with-udunits2-include=/home/arden/miniconda/include')
install.packages("ncdf")
install.packages("RcppCNPy")
install.packages("RcppCNPy")
install.packages("~/Downloads/RcppCNPy_0.2.4.tar.gz", repos = NULL, type = "source")
R
R.version
install.packages("gimms")
source('~/Desktop/Link to NDVI_monthly/bfast_trial/R_Chow_trial_rabbits.R')
source('/mnt/FCBE3028BE2FD9C2/Users/user/Documents/NDVI_monthly/bfast_trial/R_R3_trail.R', echo=TRUE)
source('/mnt/FCBE3028BE2FD9C2/Users/user/Documents/segres_demo/TSS_example.R')
while (TRUE){ #Test the variables
if (class(CTSR.VI) != "ts")
stop("CTSR.VI Not a time series object")
if ((!ACP.table) && (!CTSR.RF || acu.RF))
stop("Rainfall data invalid. ACP.table or (CTSR.RF & acu.RF")
if ((!anu.VI)||(!VI.index)){
max.df <- AnMax.VI(CTSR.VI)
anu.VI <- max.df$Max
VI.index <- max.df$index
}else{
if (class(anu.VI) != "ts")
stop("anu.VI Not a time series object")
}
if (!CTSR.RF){
CTS.Str <- ACP_calculator(CTSR.VI, ACP.table)
CTSR.RF <- CTS.Str$CTSR.precip
details.CTS.VPR <- CTS.Str$summary
}else{
if (class(CTSR.RF) != "ts")
stop("CTSR.RF Not a time series object")
#get the time data out
start.ti <- time(CTSR.VI)
freq <- frequency(CTSR.VI)
#check the two ts object cover the same time period
start.ti2 <- time(CTSR.RF)
freq2 <- frequency(CTSR.RF)
if (!identical(start.ti, startti2))
stop("ts objects do not have the same time, (CTSR.VI & CTSR.RF)")
if (!identical(f, f2))
stop("ts objects do not have the same frequency, (CTSR.VI & CTSR.RF)")
}
if (!acu.RF){
precip.df <- AnnualRF.Cal(anu.VI, VI.index, ACP.table)
acu.RF <- precip.df$annual.precip
details.acu.RF <- precip.df$summary
}else{
if (class(acu.RF) != "ts")
stop("acu.VI Not a time series object")
st.ti <- time(anu.VI)
st.f <- frequency(anu.VI)
#check the two ts object cover the same time period
st.ti2 <- time(acu.RF)
st.f2 <- frequency(acu.RF)
if (!identical(st.ti, st.ti2))
stop("ts object do not have the same time, (acu.RF & anu.VI)")
if (!identical(st.f, st.f2))
stop("ts object do not have the same frequency, (acu.RF & anu.VI)")
}
if (class(rf.b4) != "logical"){
if (length(rf.b4) != (length(rf.af)))
stop("rf.b4 and rf.af are different shapes. They must be the same size and be th same lenths as acu.VI")
}
break
}
anu.VI=FALSE, acu.RF=FALSE, VI.index=FALSE, rf.b4=FALSE, rf.af=FALSE,
anu.VI=FALSE
while (TRUE){ #Test the variables
if (class(CTSR.VI) != "ts")
stop("CTSR.VI Not a time series object")
if ((!ACP.table) && (!CTSR.RF || acu.RF))
stop("Rainfall data invalid. ACP.table or (CTSR.RF & acu.RF")
if ((!anu.VI)||(!VI.index)){
max.df <- AnMax.VI(CTSR.VI)
anu.VI <- max.df$Max
VI.index <- max.df$index
}else{
if (class(anu.VI) != "ts")
stop("anu.VI Not a time series object")
}
if (!CTSR.RF){
CTS.Str <- ACP_calculator(CTSR.VI, ACP.table)
CTSR.RF <- CTS.Str$CTSR.precip
details.CTS.VPR <- CTS.Str$summary
}else{
if (class(CTSR.RF) != "ts")
stop("CTSR.RF Not a time series object")
#get the time data out
start.ti <- time(CTSR.VI)
freq <- frequency(CTSR.VI)
#check the two ts object cover the same time period
start.ti2 <- time(CTSR.RF)
freq2 <- frequency(CTSR.RF)
if (!identical(start.ti, startti2))
stop("ts objects do not have the same time, (CTSR.VI & CTSR.RF)")
if (!identical(f, f2))
stop("ts objects do not have the same frequency, (CTSR.VI & CTSR.RF)")
}
if (!acu.RF){
precip.df <- AnnualRF.Cal(anu.VI, VI.index, ACP.table)
acu.RF <- precip.df$annual.precip
details.acu.RF <- precip.df$summary
}else{
if (class(acu.RF) != "ts")
stop("acu.VI Not a time series object")
st.ti <- time(anu.VI)
st.f <- frequency(anu.VI)
#check the two ts object cover the same time period
st.ti2 <- time(acu.RF)
st.f2 <- frequency(acu.RF)
if (!identical(st.ti, st.ti2))
stop("ts object do not have the same time, (acu.RF & anu.VI)")
if (!identical(st.f, st.f2))
stop("ts object do not have the same frequency, (acu.RF & anu.VI)")
}
if (class(rf.b4) != "logical"){
if (length(rf.b4) != (length(rf.af)))
stop("rf.b4 and rf.af are different shapes. They must be the same size and be th same lenths as acu.VI")
}
break
}
source('/mnt/FCBE3028BE2FD9C2/Users/user/Documents/segres_demo/TSS_example.R')
plot(anu.VI)
plot(anu.VI, pch=16,
xlab="Year", ylab="Annual max NDVI", col="orange")
yst <- start(anu.VI)[1]
ynd <- end(anu.VI)[1]
t = seq(ystart, ynd)
plot(t, anu.VI, pch=16,
xlab="Year", ylab="Annual max NDVI", col="orange")
yst
ynd
t = c(yst:ynd)
t
st:ynd)
plot(t, anu.VI, pch=16,
xl
t = c(yst:ynd)
plot(t, anu.VI, pch=16,
xlab="Year", ylab="Annual max NDVI", col="orange")
bp <- brkp
bp
source('/mnt/FCBE3028BE2FD9C2/Users/user/Documents/segres_demo/TSS_example.R')
bp
bkp
bkps
brkp
source("viMAX_plor.R")
setwd(this.dir)
source("viMAX_plot.R")
precip.df
source('/mnt/FCBE3028BE2FD9C2/Users/user/Documents/segres_demo/TSS_example.R')
source('/mnt/FCBE3028BE2FD9C2/Users/user/Documents/segres_demo/TSS_example.R', echo=TRUE)
source('/mnt/FCBE3028BE2FD9C2/Users/user/Documents/segres_demo/TSS_example.R', echo=TRUE)
source('/mnt/FCBE3028BE2FD9C2/Users/user/Documents/segres_demo/TSS_example.R')
source('/mnt/FCBE3028BE2FD9C2/Users/user/Documents/segres_demo/TSS_example.R')
source('/mnt/FCBE3028BE2FD9C2/Users/user/Documents/segres_demo/TSS_example.R')
source('/mnt/FCBE3028BE2FD9C2/Users/user/Documents/segres_demo/TSS_example.R')
source('/mnt/FCBE3028BE2FD9C2/Users/user/Documents/segres_demo/TSS_example.R')
source('/mnt/FCBE3028BE2FD9C2/Users/user/Documents/segres_demo/TSS_example.R')
source('/mnt/FCBE3028BE2FD9C2/Users/user/Documents/segres_demo/TSS_example.R')
source('/mnt/FCBE3028BE2FD9C2/Users/user/Documents/segres_demo/TSS_example.R')
source('/mnt/FCBE3028BE2FD9C2/Users/user/Documents/segres_demo/TSS_example.R')
install.packages("./TSS.RESTREND_0.1.02.tar.gz", repos = NULL, type="source")
install.packages("RcppRoll")
install.packages("./TSS.RESTREND_0.1.02.tar.gz", repos = NULL, type="source")
install.packages("./TSS.RESTREND_0.1.31.tar.gz", repos = NULL, type="source")
install.packages("./TSS.RESTREND_0.1.031.tar.gz", repos = NULL, type="source")
ts
install.packages("TSS.RESTREND_0.2.14.tar.gz", repos = NULL, type="source")
install.packages("bfast", "broom", "RcppRoll")
install.packages("broom", "RcppRoll")
install.packages("bfast")
install.packages("forecast")
install.packages("curl")
install.packages("libcurl")
